[project]
name = "pydantic-ai-workflow"
version = "1.0.0"
description = "A production-ready PydanticAI workflow system with AWS Bedrock integration, MCP protocol support, and intelligent memory management"
authors = [
    {name = "AgenticFlow Contributors", email = "contributors@agenticflow.dev"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["ai", "workflow", "pydantic", "mcp", "aws-bedrock", "memory-management", "fastapi", "orchestration"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.2",
    "langchain-community>=0.0.10",
    "langchain-aws>=0.1.0",
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "faiss-cpu>=1.7.4",
    "numpy>=1.24.3",
    "aiofiles>=23.2.1",
    "websockets>=12.0",
    "httpx>=0.25.2",
    "python-multipart>=0.0.6",
    "tiktoken>=0.5.2",
    "sentence-transformers>=2.2.2",
    "redis>=5.0.1",
    "sqlalchemy>=2.0.23",
    "asyncpg>=0.29.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
    "mcp>=1.0.0",
]

[dependency-groups]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

[project.scripts]
pydantic-ai-workflow = "main:main"

[project.urls]
Homepage = "https://github.com/yourusername/pydantic-ai-workflow"
Documentation = "https://yourusername.github.io/pydantic-ai-workflow"
Repository = "https://github.com/yourusername/pydantic-ai-workflow"
Issues = "https://github.com/yourusername/pydantic-ai-workflow/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["config", "models", "services", "storage", "utils"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["config", "models", "services", "storage", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.hatch.build.targets.wheel]
packages = ["config", "models", "services", "storage", "utils"]
include = [
    "main.py",
    "demo.py",
    "config/**/*.py",
    "models/**/*.py",
    "services/**/*.py",
    "storage/**/*.py",
    "utils/**/*.py",
]

[tool.hatch.version]
path = "config/__init__.py"
pattern = '__version__ = "(?P<version>[^"]+)"'
